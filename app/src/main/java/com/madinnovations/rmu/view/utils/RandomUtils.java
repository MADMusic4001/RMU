package com.madinnovations.rmu.view.utils;

import java.util.Random;

/**
 * ${CLASS_DESCRIPTION}
 *
 * @author Mark
 *         Created 5/5/2017.
 */

public class RandomUtils {
	private static Random random = new Random();

	/**
	 * Generates a random number between 2 and 20 as if rolling 2 10-sided die.
	 *
	 * @return a random number between 2 and 20.
	 */
	public static short roll2d10() {
		return (short)(random.nextInt(10) + random.nextInt(10) + 2);
	}

	/**
	 * Generates a random number between 1 and 100 as if rolling 2 10-sided die using 1 of the die as 10s digit and the other
	 * as the ones digit and interpreting 00 as 100.
	 *
	 * @return a random number between 1 and 100.
	 */
	public static short roll1d100() {
		return (short)(random.nextInt(100) + 1);
	}

	/**
	 * Generates a random number with no minimum or maximum value. The number is generated by repeatedly rolling d100 {@see
	 * roll1d100}. When a result of 96-100 is obtained on the first roll another roll is made and the result added to the
	 * first roll. If the second and subsequent rolls are again 96-100 the result is added to total and another roll is
	 * made until a non 96-100 result is obtained.
	 * When a result of 01-05 is obtained on the first roll a second roll is made and that number is subtracted from the first
	 * roll. If the second and subsequent rolls are 96-100 the result is subtracted and another roll is made until a non 96-100
	 * result is obtained.
	 *
	 * @return a random number with no minimum or maximum.
	 */
	public static short roll1d100OE() {
		short result = roll1d100();
		if(result >= 96) {
			short temp;
			do {
				temp = roll1d100();
				result += temp;
			}while(temp >= 96);
		}
		else if(result <=5) {
			short temp;
			do {
				temp = roll1d100();
				result -= temp;
			} while(temp >= 96);
		}
		return result;
	}

	/**
	 * Generates a random number with no minimum or maximum {@see roll1d100OE} but if the first unmodified roll is between 1
	 * and the value passed in umRange then that value is returned with no further rolls.
	 *
	 * @param umRange  the high end of the unmodified roll range (the low end is 1).
	 * @return a random number with no minimum or maximum unless the first roll is between 1 and umRange in which case that
	 * value is return as is.
	 */
	public static short roll1d100OEUM(short umRange) {
		short result = roll1d100();
		if(result <= umRange) {
			return result;
		}
		if(result >= 96) {
			short temp;
			do {
				temp = roll1d100();
				result += temp;
			}while(temp >= 96);
		}
		else if(result <=5) {
			short temp;
			do {
				temp = roll1d100();
				result -= temp;
			} while(temp >= 96);
		}
		return result;
	}

	/**
	 * Generates a random number with no maximum {@see roll1d100OE}.
	 *
	 * @return a random number with no maximum.
	 */
	public static short roll1d100UOE() {
		short result = roll1d100();
		if(result >= 96) {
			short temp;
			do {
				temp = roll1d100();
				result += temp;
			}while(temp >= 96);
		}
		return result;
	}
}
